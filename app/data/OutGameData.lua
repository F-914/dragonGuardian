---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Zoybzo.
--- DateTime: 2022-07-05 16:18
---
local OutGameData = {}
--local
local ConstDef = require("app.def.ConstDef")
local EventDef = require("app.def.EventDef")
local EventManager = require("app.manager.EventManager")
local UserInfo = require("app.data.UserInfo")
local Shop = require("app.data.Shop")
--网络部分
local OutGameMsgController = require("src/app/network/OutGameMsgController.lua")
local MsgDef = require("src/app/def/MsgDef.lua")
local TableUtil = require("src/app/utils/TableUtil.lua")

--
local _userInfo
local _coinShop
local _diamondShop
--

function OutGameData:init()
    --连接到服务器
    OutGameMsgController:connect()


    _userInfo = UserInfo.getInstance()
    --这里应该通过向服务端发送用户账户和密码信息，来获取用户的数据
    --然后将用户的数据填充
    --注册回调函数
    OutGameMsgController:registerListener(MsgDef.INIT_USERINFO, handler(self, self.serviceDataSync))
    ---这个传递的表格暂时这样
    ---每一个传递的msg都应该有type类型
    OutGameMsgController:sendMsg({
        type = MsgDef.INIT_USERINFO,
        account = _userInfo.account,
    })


    self:initCoinShop()
    self:initDiamondShop()
    --_coinShop = Shop.new()
    --_diamondShop = Shop.new()
end
--[[--
    @description 初始化或者同步服务器和客户端userinfo的数据
    @param msg type:string, 由服务器发送的消息
]]
function OutGameData:serviceUserInfoDataSync(msg)
    TableUtil:toUserInfo(msg)
end
--[[--
    @description 初始化或者同步金币商店数据
    每一次同步都会弃用原来的数据,会造成资源浪费
    但是同步频率不高,应该影响不大吧????
    @param msg type:string, 由服务器发送的消息
]]
function OutGameData:serviceCoinShopSync(msg)
    _coinShop = TableUtil:toShop(msg)
end
--[[--
    @description 初始化或者同步钻石商店数据
    每一次同步都会弃用原来的数据,会造成资源浪费
    但是同步频率不高,应该影响不大吧????
    @param msg type:string, 由服务器发送的消息
]]
function OutGameData:serviceDiamondShopSync(msg)
    _diamondShop = TableUtil:toShop(msg)
end

function OutGameData:update(dt)
    ---在这里,应该每隔一段时间就进行数据同步
end

function OutGameData:initDiamondShop()

end

function OutGameData:initCoinShop()

end

function OutGameData:initUserInfo()

end

-- 不太确定函数返回的是引用还是复制的值，所以调用的时候还是先调用这个再用别的
function OutGameData:getUserInfo()
    if _userInfo == nil then
        self:initUserInfo()
    end
    return _userInfo
end

function OutGameData:getCoinShop()
    if _coinShop == nil then
        self:initCoinShop()
    end
    return _coinShop
end

function OutGameData:getCoinShopRefreshTime()
    if _coinStore == nil then
        self:initCoinShop()
    end
    return _coinShop:getCoinShopRefreshTime()
end

return OutGameData
